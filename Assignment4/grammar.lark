?start: prog

?prog: exp
     | exp ";;" prog -> seq

?exp: eq_exp

?eq_exp: list_ops
       | list_ops "==" list_ops -> eq

?list_ops: sum
         | list_ops ":" sum -> cons
         | "hd" list_ops     -> hd
         | "tl" list_ops     -> tl
         | "let" NAME "=" list_ops "in" list_ops    -> let
         | "letrec" NAME "=" list_ops "in" list_ops -> rec
         | "fix" list_ops                           -> fix
         | "if" list_ops "then" list_ops "else" list_ops -> if_then_else

?sum: product
    | sum "+" product    -> plus
    | sum "-" product    -> minus

?product: comparison
        | product "*" comparison    -> multiply

?comparison: unary
          | comparison "<" unary   -> lt
          | comparison ">" unary   -> gt
          | comparison "<=" unary  -> le
          | comparison ">=" unary  -> ge

?unary: app
      | "-" unary         -> negation

?app: atom
    | app atom           -> app

?atom: NUMBER            -> number
     | NAME              -> var
     | "\\" NAME "." exp -> lam
     | "(" exp ")"
     | "#"               -> nil

// Define the terminals (tokens)
WS: /\s+/
COMMENT: /\/\/.*/

NAME: /[a-z_][a-zA-Z0-9_]*/
NUMBER: /\d+(\.\d+)?/

%ignore WS
%ignore COMMENT